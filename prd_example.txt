## 저속노화 AI 영양 분석 앱 MVP 제품 요구사항 문서 (PRD)

### 1. 제품 개요 (Product Overview)

**제품명 (가칭):** 느리게 나이들기 (Slow-Aging AI)

**제품 설명:**
"느리게 나이들기"는 **저속노화(Slow-Aging)** 컨셉을 기반으로 한 AI 음식 분석 및 노화 관리 모바일 애플리케이션입니다. 사용자가 음식 사진을 찍거나 음식 종류를 입력하면, AI가 해당 음식의 영양 성분을 분석하여 저속노화 관점에서 **'노화 지수'**를 산출하고, 이를 통해 건강한 식습관을 유도하는 밈(Meme)처럼 가볍고 재미있는 경험을 제공합니다.

**핵심 컨셉:**
정확한 의학적 데이터를 제공하기보다는, '오늘 내 노화 시계는 얼마나 빨라졌을까?'와 같은 재미 요소를 통해 사용자가 저속노화에 대한 관심을 갖고 건강한 식습관을 형성하도록 돕는 것을 목표로 합니다. cal.ai의 직관적인 음식 인식 및 분석 방식을 차용하되, '저속노화'라는 명확하고 트렌디한 컨셉에 집중합니다.

**타겟 사용자:**
* 20대 후반 ~ 40대 초반의 건강 및 자기 관리에 관심이 많은 남녀
* '저속노화', '안티에이징' 등의 키워드에 민감하게 반응하는 사용자
* 새로운 기술과 트렌디한 앱 사용에 거부감이 없는 사용자
* 식단 기록을 재미있고 가볍게 시작하고 싶은 사용자

---

### 2. 제품 목표 (Product Goals)

* **사용자 참여 유도:** 사용자가 매일 꾸준히 자신의 식단을 기록하고 '노화 지수'를 확인하며 재미를 느끼게 한다.
* **저속노화 개념 확산:** '노화 지수'라는 직관적인 개념을 통해 저속노화에 좋은 음식과 나쁜 음식을 쉽게 인지시킨다.
* **MVP 시장성 검증:** 최소 기능 제품(MVP)을 통해 저속노화와 AI 음식 분석을 결합한 서비스의 시장 수요와 사용자 반응을 확인한다.

---

### 3. 사용자 스토리 (User Stories)

* **As a** 건강에 관심이 많은 30대 직장인, **I want to** 내가 먹는 음식이 내 노화에 어떤 영향을 미치는지 쉽고 재미있게 알고 싶다. **So that** 더 건강한 음식을 선택하는 습관을 기를 수 있다.
* **As a** 다이어트 중인 20대 대학생, **I want to** 칼로리 계산보다 더 직관적이고 새로운 방식으로 식단을 기록하고 싶다. **So that** 식단 관리에 대한 동기부여를 잃지 않을 수 있다.
* **As a** 트렌드에 민감한 사용자, **I want to** 친구들과 나의 '노화 지수'를 공유하며 즐기고 싶다. **So that** 건강 관리를 하나의 놀이처럼 즐길 수 있다.

---

### 4. 핵심 기능 (Key Features - MVP)

#### **F-01: AI 기반 음식 사진 인식 및 분석**
* 사용자가 앱 내 카메라로 음식 사진을 촬영하거나 갤러리에서 이미지를 불러온다.
* AI가 이미지를 분석하여 어떤 음식인지 인식한다. (예: "치킨과 맥주", "퀴노아 샐러드")
* 음식 인식이 실패하거나 부정확할 경우, 사용자가 직접 음식 이름을 검색하여 입력할 수 있다.

#### **F-02: '노화 지수' 산출 및 결과 표시**
* 분석된 음식을 기반으로 자체적으로 설정한 **'저속노화 알고리즘'**에 따라 '노화 지수'를 산출한다.
    * **노화 가속 (Aging +):** 가공식품, 당분이 많은 음식, 튀긴 음식 등은 노화 시간을 더한다. (예: "노화 +8시간")
    * **노화 감속 (Aging -):** 항산화 성분이 풍부한 채소, 건강한 지방, 단백질 등은 노화 시간을 뺀다. (예: "노화 -3시간")
* 결과 화면에 인식된 음식 이미지, 음식 이름, 산출된 '노화 지수'를 명확하고 시각적으로 보여준다.
* 노화 지수에 대한 간단하고 위트 있는 코멘트를 함께 제공한다. (예: "+8시간! 오늘 밤은 조금 더 늙어버렸네요. 내일은 젊어지는 음식을 먹어볼까요?")



#### **F-03: 일일 '노화 리포트' 및 기록**
* 하루 동안 기록한 음식들의 '노화 지수'를 합산하여 **'오늘의 최종 노화 리포트'**를 제공한다. (예: "오늘 총 +1일 2시간 늙었어요!")
* 사용자가 기록한 음식과 노화 지수는 날짜별로 캘린더나 타임라인 형태로 저장되어 언제든 다시 확인할 수 있다.
* 간단한 그래프나 아이콘을 통해 주간/월간 노화 지수 변화 추이를 보여준다.

#### **F-04: 소셜 공유 기능**
* '오늘의 노화 리포트'나 특정 음식의 '노화 지수' 분석 결과를 이미지 카드 형태로 생성하여 인스타그램, 카카오톡 등 주요 소셜 미디어에 쉽게 공유할 수 있다.
* 공유 이미지에는 앱 로고나 해시태그를 포함하여 자연스러운 바이럴 마케팅을 유도한다.

---

### 5. '저속노화' 알고리즘 기준 (MVP)

정확한 의학적 데이터보다는 **상대적이고 상징적인 수치**에 집중하여 재미 요소를 극대화한다.

* **노화 가속 요인 (플러스 점수):**
    * **AGEs (최종당화산물):** 튀기거나 구운 음식, 가공육, 탄산음료
    * **단순당:** 설탕, 액상과당이 많이 포함된 디저트 및 음료
    * **포화지방/트랜스지방:** 패스트푸드, 과자
    * **알코올:** 주종 및 섭취량에 따라 차등 적용
* **노화 감속 요인 (마이너스 점수):**
    * **항산화 물질:** 베리류, 녹색 잎채소, 파프리카 등 다채로운 색의 채소/과일
    * **건강한 지방:** 아보카도, 견과류, 올리브 오일
    * **고품질 단백질:** 생선, 콩, 두부
    * **섬유질:** 통곡물, 채소

**점수 체계 (예시):**
* 아메리카노: -30분
* 야채 샐러드 (드레싱 제외): -2시간
* 삼겹살 1인분: +5시간
* 라면: +7시간
* 치킨과 맥주: +12시간
* 딸기 한 컵: -1시간

> 💡 **Tip:** MVP 단계에서는 복잡한 영양 성분 DB 연동보다, 대표적인 음식 카테고리별로 노화 지수를 단순화하여 빠르게 적용하는 것이 중요합니다. (예: '라면류', '튀김류', '샐러드류' 등)

---

### 6. 비기능적 요구사항 (Non-functional Requirements)

* **사용성 (Usability):** 사용자가 앱을 처음 실행했을 때, 별도의 튜토리얼 없이도 음식 사진을 찍고 결과를 확인하는 핵심 과정을 직관적으로 이해할 수 있어야 한다.
* **성능 (Performance):** 음식 사진 업로드 후 3~5초 이내에 AI 분석 결과가 나와야 한다.
* **디자인 (Design):** 젊고 트렌디한 감성의 UI/UX 디자인을 적용하여 사용자의 흥미를 유발하고, 결과 화면의 시각적 만족도를 높인다.
* **플랫폼 (Platform):** iOS 및 Android 동시 개발을 고려한다. (크로스플랫폼 프레임워크 활용 권장)


-----
# 기술 스택 예시 
## AI 페어코딩을 위한 기술 PRD: 느리게 나이들기 (Slow-Aging AI)

### 1\. 프로젝트 개요 및 목표 🎯

  * **제품명:** 느리게 나이들기 (Slow-Aging AI)
  * **핵심 목표:** 사용자가 음식 사진을 찍어 전송하면, 백엔드 서버가 AI를 통해 음식을 분석하고 '노화 지수'를 계산하여 앱에 보여주는 MVP(최소 기능 제품) 개발
  * **AI 활용:** AI를 개발 파트너로 삼아 프론트엔드와 백엔드 코드를 단계별로 생성하고 리뷰하며 개발 속도 극대화

### 2\. 기술 스택 ( 확정 )

  * **프론트엔드 (Frontend):** React Native (TypeScript 기반)
  * **백엔드 (Backend):** Kotlin & Spring Boot
  * **데이터베이스 (Database):** PostgreSQL
  * **AI (이미지 분석):** Google Cloud Vision AI (Food Detection) API
  * **인프라 (Infra):** AWS 또는 GCP (MVP 단계에서는 로컬 개발 우선)

### 3\. 시스템 아키텍처 🏗️

1.  **(React Native)** 사용자가 앱에서 음식 사진을 촬영하거나 갤러리에서 선택합니다.
2.  **(React Native)** 이미지를 `multipart/form-data` 형식으로 백엔드 API 서버에 전송합니다.
3.  **(Spring Boot)** 서버는 이미지를 수신하여 Google Cloud Vision API로 전달합니다.
4.  **(Google Cloud Vision)** 음식 이미지를 분석하여 음식 이름(Label) 목록을 백엔드 서버에 반환합니다. (예: "Pizza", "French fries")
5.  **(Spring Boot)** 반환된 음식 이름을 기반으로 자체 \*\*'노화 지수 산출 로직'\*\*을 실행하고, 결과를 데이터베이스에 저장합니다.
6.  **(Spring Boot)** 최종 분석 결과(음식 이름, 노화 지수, 메시지)를 JSON 형태로 React Native 앱에 응답합니다.
7.  **(React Native)** 수신한 JSON 데이터를 사용자 화면에 렌더링합니다.

-----

### 4\. API 명세 (Contract First) 🤝

프론트엔드와 백엔드가 독립적으로 개발을 시작할 수 있도록 API 명세를 먼저 정의합니다.

#### **음식 이미지 분석 API**

  * **Endpoint:** `POST /api/v1/food/analyze`
  * **Content-Type:** `multipart/form-data`
  * **Request:**
      * **Part:** `image`
      * **Type:** `File`
      * **Description:** 사용자가 촬영한 음식 이미지 파일
  * **Response (Success - 200 OK):**
    ```json
    {
      "analyzedFoodName": "후라이드 치킨",
      "agingScore": 8,
      "agingUnit": "시간",
      "message": "바삭함 뒤에 숨겨진 시간의 습격! 내일은 젊어지는 음식을 먹어봐요.",
      "logId": 123
    }
    ```
  * **Response (Failure - 400 Bad Request):**
    ```json
    {
      "errorCode": "INVALID_IMAGE_FILE",
      "errorMessage": "분석할 수 없는 이미지 파일입니다."
    }
    ```

### 5\. 데이터 모델 (Database Schema) 🗄️

JPA Entity 기준으로 데이터베이스 테이블을 설계합니다.

#### **FoodLog (음식 기록)**

| 컬럼명 | 데이터 타입 | 설명 | 예시 |
| :--- | :--- | :--- | :--- |
| `id` (PK) | `Long` | 로그 고유 ID | `123` |
| `userId` | `Long` | 사용자 ID (MVP에서는 '1'로 고정) | `1` |
| `foodName` | `String` | 분석된 음식 이름 | `"후라이드 치킨"` |
| `agingScore` | `Int` | 노화 지수 (시간 단위) | `8` |
| `message` | `String` | 시스템이 생성한 코멘트 | `"바삭함 뒤에 숨겨진..."` |
| `imageUrl` | `String` | (선택) S3 등에 저장된 이미지 URL | `"https://.../image.jpg"` |
| `createdAt`| `LocalDateTime` | 기록 생성 시간 | `"2025-09-20T14:30:00"` |

-----

### 6\. MVP 개발 마일스톤 (단계별 개발 가이드) 🗺️

AI에게 각 단계별로 코딩을 요청하고 리뷰하며 진행합니다.

#### **Phase 1: 백엔드 기초 공사**

1.  **Spring Boot 프로젝트 생성:** Kotlin, Spring Web, Spring Data JPA, PostgreSQL Driver 의존성 추가.
2.  **DB 연결 설정:** `application.yml` 파일에 PostgreSQL 연결 정보 설정.
3.  **데이터 모델 구현:** `FoodLog` 클래스를 JPA Entity(`@Entity`)로 작성.
4.  **Repository 생성:** `FoodLogRepository` 인터페이스를 `JpaRepository`를 상속받아 생성.

#### **Phase 2: 백엔드 핵심 로직 개발**

1.  **Google Vision API 연동:** Vision AI 클라이언트 라이브러리를 사용하여 이미지 파일을 받아 음식 라벨을 반환하는 `VisionService` 구현.
2.  **노화 지수 산출 로직 구현:** `FoodAnalysisService` 내부에 음식 이름(키워드)을 기반으로 점수를 매기는 간단한 `Map` 또는 `enum` 기반의 규칙 엔진 구현.
3.  **API 컨트롤러 구현:** API 명세에 따라 `POST /api/v1/food/analyze` 요청을 처리하는 `FoodController` 작성. Controller는 Service를 호출하여 비즈니스 로직을 수행.

#### **Phase 3: 프론트엔드 기초 공사**

1.  **React Native 프로젝트 생성:** TypeScript 템플릿으로 프로젝트 설정.
2.  **라이브러리 설치:** `axios` (API 통신), `react-navigation` (화면 전환), `react-native-vision-camera` (카메라), `react-native-image-picker` (갤러리) 설치.
3.  **화면 구조 설계:** 홈(카메라/갤러리 버튼), 로딩, 결과 화면 3가지 기본 화면 구성.

#### **Phase 4: 프론트엔드 기능 구현 및 연동**

1.  **카메라/갤러리 기능 구현:** 홈 화면에서 버튼 클릭 시 카메라를 실행하거나 갤러리를 열어 사진을 선택하는 기능 구현.
2.  **API 서비스 모듈 생성:** `axios`를 사용하여 백엔드 API(`POST /api/v1/food/analyze`)를 호출하는 함수 작성.
3.  **상태 관리 및 화면 연동:** 사진 선택 -\> (로딩 화면) -\> API 호출 -\> 결과 수신 -\> 결과 화면에 데이터 바인딩하는 전체 플로우 구현.
4.  **결과 화면 UI 구현:** API로부터 받은 `analyzedFoodName`, `agingScore` 등을 활용하여 결과 화면을 예쁘게 렌더링.
